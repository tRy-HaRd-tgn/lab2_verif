#include <iostream>
#include <cmath>
#include <complex>
#include <vector>

double factorial(double n )//фаториал отрицательного числа не существует
{
	if ( n == 0 )
		return 1 ;
	return n * factorial( n - 1 );
}

double funcF(double a , double b ) // x1
{
	double x1 ;	//в решении такого уравнения у нас 3 корня
	
	double temp1 = a + b ;
	temp1 = factorial( temp1 ) ;	//вычислили факториал
	temp1 *= 3 ;

	double temp2 = factorial( a ) ;
	temp2 *= 2 ;

	double temp3 = temp1 / temp2;
	x1 = pow(temp3, 1.0 / 3 ) ;	//корень 3 степени
	x1 = x1 * -1 ;
	return x1 ;
}
double funcS(double a , double b ) // x2
{
	double temp1 = a + b ;	
	temp1 = factorial( temp1 );		// (a+b)!
	temp1 = pow( temp1 , 1.0 / 3 ) ;	// sqrt³((a+b)!)

	double temp2 = pow( 3 , 1.0 / 3 ) ;	
	temp2 *= -1 ;					// -sqrt³(3)

	double temp3 = pow( 3, 5 ) ;
	temp3 = pow( temp3, 1.0 / 6 ) ;	// sqrt⁶(3⁵)

	temp2 = temp2 + temp3 ;
	temp1 = temp1 * temp2 ;		// complete

	temp2 = pow( 2 , 1.0 / 3 ) ;

	temp3 = factorial( a );
	temp3 = pow( temp3, 1.0 / 3 );
	temp2 = temp2 * temp3 ;
	temp2 *= 2 ;					// complete

	double x2 = temp1 / temp2;
	x2 *= -1 ;
	return x2 ;
}
double funcT(double a , double b )	// x3
{
	double temp1 = a + b;
	temp1 = factorial( temp1 );		// (a+b)!
	temp1 = pow(temp1, 1.0 / 3 );	// sqrt³((a+b)!)

	double temp2 = pow( 3, 1.0 / 3 );
	temp2 *= -1 ;					// -sqrt³(3)

	double temp3 = pow( 3, 5 );
	temp3 = pow(temp3, 1.0 / 6 );	// sqrt⁶(3⁵)

	temp2 = temp2 - temp3 ;
	temp1 = temp1 * temp2 ;		// complete

	temp2 = pow( 2, 1.0 / 3 );

	temp3 = factorial( a );
	temp3 = pow( temp3, 1.0 / 3 );
	temp2 = temp2 * temp3 ;
	temp2 *= 2 ;					// complete

	double x3 = temp1 / temp2 ;
	x3 *= -1 ;
	return x3 ;
}

int main() 
{
	double a, b;

	std::vector<std::vector <int>> vec_t; // матрица t
	std::vector<int> vec_temp_t;
	std::cout << "Input matrix 5x5" << std::endl;
	for (int i = 0 ; i < 5 ; ++i) 
	{
		for (int j = 0 ; j < 5 ; ++j ) 
		{
			int temp;
			std::cin >> temp;
			vec_temp_t.push_back( temp );

		}
		vec_t.push_back( vec_temp_t );
		vec_temp_t.clear();
	}
	int count_t = 0 ;
	for (int i = 0 ; i < 5 ; ++ i )
	{
		for (int j = 0; j < 5 ; ++ j )
		{
			if (j % 2 == 0) 
			{
				if (vec_t[i][j] > 0 ) {
					count_t++;
				}
			}

		}
	}
	a = count_t;

	std::cout << "Input matrix 6x6" << std::endl;
	std::vector<std::vector <int>> vec_d; // матрица d
	std::vector<int> vec_temp_d;
	for (int i = 0 ; i < 6 ; ++ i )
	{
		for (int j = 0 ; j < 6 ; ++ j )
		{
			int temp;
			std::cin >> temp;
			vec_temp_d.push_back(temp);

		}
		vec_d.push_back(vec_temp_d);
		vec_temp_d.clear();
	}
	int count_d = 0;
	for (int i = 0 ; i < 6 ; ++ i )
	{
		for (int j = 0 ; j < 6 ; ++ j )
		{
			if (j % 2 == 0 )
			{
				if (vec_d[i][j] > 0 ) {
					count_d ++;
				}
			}

		}
	}
	b = count_d;

	std::cout << " x1 - " << funcF(a, b) << std::endl;
	std::cout << " x2 - " << funcS(a, b) << std::endl;
	std::cout << " x3 - " << funcT(a, b) << std::endl;


	return 0 ;
}